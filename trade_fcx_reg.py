# -*- coding: utf-8 -*-
"""trade_FCX_reg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S-vSpZTOk0ycmNBCrdCoG4B9sTEgbqM6
"""

!pip install stockstats
!pip install --upgrade scikit-learn

import pandas as pd
import matplotlib.pyplot as plt
import stockstats
import xgboost as xgb
import numpy as np
import seaborn as sns

from google.colab import drive
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from xgboost import XGBRegressor

# Mount Google Drive
drive.mount('/content/drive', force_remount=True)

# Define the file path
file_path = "/content/drive/MyDrive/Colab/data/FCX_3y.csv"

# Load the CSV file into a pandas DataFrame
try:
  df = pd.read_csv(file_path)
  print("File loaded successfully into DataFrame 'df'.")
except FileNotFoundError:
    print(f"Error: The file was not found at the specified path. Please make sure the file exists at '{file_path}'.")
except Exception as e:
    print(f"An error occurred: {e}")

price = df['close']
fig = plt.figure(figsize=(10, 6))
plt.plot(price)
plt.show()

# Controlliamo il dataset
print(df.head())

stock_df = stockstats.StockDataFrame.retype(df, "index")

boll_values = stock_df.get('boll')
rsi = stock_df.get("rsi")
macd = stock_df.get('macd')
chop = stock_df.get('chop')
ppo = stock_df.get('ppo')
vr = stock_df.get('vr')

# Attacco i dati calcolati al DataFrame "data"
df['rsi'] = rsi
df['boll'] = stock_df["boll"]
df['boll_ub'] = stock_df["boll_ub"]
df['boll_lb'] = stock_df["boll_lb"]
df['macd'] = stock_df["macd"]
df['macds'] =stock_df["macds"]
df['macdh'] = stock_df["macdh"]
df['chop'] = stock_df['chop']
df['ppo'] = stock_df['ppo']
df['ppos'] = stock_df['ppos']
df['ppoh'] = stock_df['ppoh']
df["vr"] = stock_df['vr']


# Aggiunta variabili consigliate da chatgpt
df['cci'] = stock_df['cci_14']   # CCI con periodo 14
#df['roc'] = stock_df['roc_10']   # Rate of Change con periodo 10
#df['ema_10'] = stock_df['ema_10']   # EMA 10
#df['ema_50'] = stock_df['ema_50']   # EMA 50
#df['ema_200'] = stock_df['ema_200'] # EMA 200
#df['adx'] = stock_df['adx_14']      # ADX con periodo 14
df['atr'] = stock_df['atr_14']      # ATR con periodo 14
#datdfa['obv'] = stock_df['obv']     # On Balance Volume
df['mfi'] = stock_df['mfi_14']  # Money Flow Index con periodo 14

print(df.head())

"""Pulizia e divisione dati training e test"""

df['target'] = df['close'].shift(-1)  # Prezzo di chiusura al prossimo minuto
df = df.dropna()  # Rimuovi righe con NaN

# Rimuovere colonne inutili se presenti
columns_to_drop = ["timestamp","symbol", "close", "open", "high", "low"]
columns_to_drop = [col for col in columns_to_drop if col in df.columns]  # Check if column exists
df = df.drop(columns=columns_to_drop)

# Replace infinite values with NaN
df = df.replace([np.inf, -np.inf], np.nan)

rows_before = df.shape[0]  # Numero di righe prima
df = df.dropna().reset_index(drop=True)
rows_after = df.shape[0]   # Numero di righe dopo

print(f"Righe eliminate: {rows_before - rows_after}")  # Controllo che solo la prima riga sia stata eliminata

# Definiamo X (feature) e y (target)
X = df.drop(columns=["target"])  # Feature
y = df["target"]  # Target

# Controlliamo la forma dei dati
print("Shape di X:", X.shape)
print("Shape di y:", y.shape)

# Visualizziamo le prime righe di X
print(X.head())

# Dividiamo il dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42, shuffle=False)

# Controlliamo la dimensione dei dataset
print(f"Train set: {X_train.shape}, Test set: {X_test.shape}")

"""Inizio del training"""

model = XGBRegressor(
    objective='reg:squarederror',
    n_estimators=500,
    learning_rate=0.05,
    max_depth=5,
    subsample=0.8,
    colsample_bytree=0.8,
)

model.fit(X_train, y_train)

# Salva il modello in formato JSON
model.save_model("/content/drive/MyDrive/Colab/regression_xgboost_model.json")

"""Prediction"""

preds = model.predict(X_test)

# Supponiamo che tu abbia già le previsioni (preds) e i valori reali (y_test)
mae = mean_absolute_error(y_test, preds)
mse = mean_squared_error(y_test, preds)
rmse = np.sqrt(mse)  # CORREZIONE: aggiunta la radice quadrata
r2 = r2_score(y_test, preds)

print(f"MAE: {mae}")
print(f"MSE: {mse}")
print(f"RMSE: {rmse}")
print(f"R²: {r2}")

import matplotlib.pyplot as plt
from xgboost import plot_importance

plt.figure(figsize=(12, 6))
plt.plot(y_test.values, label='Reale')
plt.plot(preds, label='Predetto', linestyle='--')
plt.legend()
plt.show()

plot_importance(model)
plt.show()